"To be submitted: All source code files, as well as a brief report (~2 paragraphs) from each student discussing what challenges they
encountered and how they were solved, as well as which part of the project they worked on."

Alexa:
For my part of the project I worked on adding a slider to scale the selected shape and a drop down to change the color of
the selected shape. A challenge I found when creating the slider was that when I originlly set the scale and moved the slider,
the shape would become large very quickly and take up the whole screen. I had to adjust the max value in order to get a more gradual
scale change. Also, I set the min to 0 originally which caused the shape to disappear altogehter so I changed the min to 1.
As for creating the color drop down, I found this to be more difficult and it took more time for me than the slider. I used a choicebox
to add various colors as well as the default color of lightgray, because I found that once you clicked a color choice there was no way 
to go back to the default color if I didn't add it as a selection. I considered using a button that led to a listview to change the color
but I found that using a choicebox looked cleaner when added to the subscene. At first I struggled with registering the event but I used 
nested if and else if statements in order to change each color only when each shape was selected. I know that using nested statements
isn't the cleanest and fastest way to go about the choicebox; however, I faced roadblocks when trying to find other ways. 

Sean:
For my part, I made the subscene and the button to add shapes. I added the ability to choose a box, sphere, or cynlinder. 
The tricky part was for the menu to change when you selected the different shapes. For example, for a sphere, there is no height, width, etc. 
But for a box, there is a setting for those, but there is no setting for radius. And for a cylinder there is a radius and a height. 
There is also a setting for translating and scaling initially when you create a shape. 
I also added the background color changer for the subscene - but Alexa had written that code for the shapes so it was easy for me to copy that over for the background.
The tricky part for me was making the different settings disappear and then reappear again when you changed what kind of shape
that you were going to make.

Siavash:
For my role in this assignment, I was in charge of having whatever shape that was clicked on in the subscene become the selected shape, 
as well as the rotation and translation of the shape. I originally created these in a seperate program with test shapes already added 
in order to get a basic idea of how I would code it. Once most of the code for creating and object and subscene was created by Sean,
I was able to translate what I had into the code the group was working on. 
I did have some trouble when it came to getting a mouseclick event to work whenever a shape was clicked in the subscene. 
Whenever a shape was created it was saved to the subscene, however I could not click on specific objects inside the subscene. 
So I had to create a Group, add it to the subscene, and have whatever shape that was created then added to the Group. 
There were a good amount of repeat lines of codes when I handled the mouseclick event at first, but with the groups help it is now more clean and efficient. 

Mases:
I took charge of the saving and loading of the objects. I wrote a seperate class that gets initialized in the main class. The main challenge was implementing the saver class to work with the original class. I had to make many adjustments to the original class to make it work to how I was saving the information in the saver class. Additionally, when trying to the transformation of the objects, I had to make the selection method more abstract and implement an Event handler for the Mouse Clicked event that checks the source and casts it into a Shape3D object. Since that object contains all the functionalties of the other shapes, it was easy to slightly fix the rotation and translation methods to work on that object in an abstract way. 
When loading back the objects, I found that reading the objects and creating them in a seperate class meant I need to initialize all the boxes from scratch and re write their transformations. We settled on making the objects have transforms in order. For example, the translation,rotation, and scaling go in that order. So when the main class retrieves it, it knows to re initialize the sub scene objects and transform them properly. This was tedious to keep track of, and required consistency across all implementations.
